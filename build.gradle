plugins {
  id 'application'
  id "java"
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.4.RELEASE'
  id 'org.springframework.boot' version '1.5.10.RELEASE'
  id 'org.owasp.dependencycheck' version '3.1.1'
  id 'com.github.ben-manes.versions' version '0.17.0'
  id 'net.ltgt.apt' version '0.10'
  id 'org.sonarqube' version '2.6.1'
}

group = 'uk.gov.hmcts.reform.sandl'
version = '0.0.1'

sourceCompatibility = 1.8
targetCompatibility = 1.8

apply plugin: 'java'
apply plugin: 'idea'

idea {
  module {
    // stays here but to consider if this is a good idea longterm
    // because it requires to build the project at lest once so intellij
    // it up
    sourceDirs += file("out/production/classes/production")
  }
}

checkstyle {
  maxWarnings = 0
  toolVersion = '8.8'
  // need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
  configDir = new File(rootDir, 'config/checkstyle')
}

pmd {
  toolVersion = "5.8.1"
  ignoreFailures = true
  sourceSets = [sourceSets.main, sourceSets.test]
  reportsDir = file("$project.buildDir/reports/pmd")
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

dependencyUpdates.resolutionStrategy = {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
      }
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'dependency-check-suppressions.xml'
}

repositories {
  jcenter()
}

apply from: 'liquibase.gradle'
// it is important to specify logback classic and core packages explicitly as libraries like spring boot
// enforces it's own (older) version which is not recommended.
def versions = [
  logback: '1.2.3',
  reformLogging: '1.5.0',
  springBoot: springBoot.class.package.implementationVersion,
  springHystrix: '1.4.5.RELEASE',
  springfoxSwagger: '2.8.0'
]

dependencies {
  compile 'org.projectlombok:lombok:1.18.2'
  apt "org.projectlombok:lombok:1.18.2"
  annotationProcessor 'org.projectlombok:lombok:1.18.2'

  compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: versions.springBoot
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: versions.springBoot
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: versions.springBoot
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: versions.springBoot
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: versions.springBoot

  compile group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.0'

  compile group: 'ch.qos.logback', name: 'logback-classic', version: versions.logback
  compile group: 'ch.qos.logback', name: 'logback-core', version: versions.logback
  compile group: 'com.microsoft.azure', name: 'applicationinsights-logging-logback', version: '2.0.+'
  compile group: 'com.microsoft.azure', name: 'applicationinsights-web', version: '2.+'
  compile group: 'com.microsoft.azure', name: 'applicationinsights-spring-boot-starter', version: '1.0.0-BETA'

  compile group: 'org.postgresql', name: 'postgresql', version: '42.2.2'
  compile group: 'org.liquibase', name: 'liquibase-core', version: '3.6.1'
  compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.9.5'

  compile group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger
  compile group: 'io.springfox', name: 'springfox-swagger-ui', version: versions.springfoxSwagger

  compile group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.0'

  compile 'org.hibernate:hibernate-java8:5.2.17.Final'
  compile 'org.hibernate:hibernate-core:5.2.17.Final'
  compile 'org.hibernate:hibernate-entitymanager:5.2.17.Final'

  compile group: 'org.hibernate', name: 'hibernate-envers', version: '5.2.17.Final'

  compile group: 'uk.gov.hmcts.reform', name: 'java-logging-spring', version: versions.reformLogging
  compile group: 'uk.gov.hmcts.reform', name: 'java-logging-httpcomponents', version: versions.reformLogging
  compile group: 'uk.gov.hmcts.reform', name: 'http-proxy-spring-boot-autoconfigure', version: '1.1.0'
  compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix', version: versions.springHystrix

  compile group: 'org.springframework.cloud', name: 'spring-cloud-contract-wiremock', version: '1.2.5.RELEASE'

  compile "org.hibernate:hibernate-jpamodelgen:5.2.17.Final"
  annotationProcessor "org.hibernate:hibernate-jpamodelgen:5.2.17.Final"


  testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: versions.springBoot
  testCompile group: 'io.rest-assured', name: 'rest-assured', version: '3.0.6'
  testCompile group: 'com.h2database', name: 'h2', version: '1.4.197'
  testCompile group: 'com.github.tomakehurst', name: 'wiremock', version: '2.18.0', ext: 'pom'
}

jar {
  archiveName 'snl-events.jar'

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

sourceSets {
  common {
    java.srcDir 'src/test/common'
  }
  test {
    java.srcDir 'src/test/java'
    compileClasspath += main.output + common.output
    runtimeClasspath += main.output + common.output
  }
  functional {
    java.srcDir 'src/test/functional/java'
    resources.srcDir 'src/test/resources'
    compileClasspath += main.output + test.output + common.output
    runtimeClasspath += main.output + test.output + common.output
  }
  integrationSources {
    java.srcDir 'src/test/integration'
    resources.srcDir 'src/test/resources'
    compileClasspath += main.output + test.output + common.output
    runtimeClasspath += main.output + test.output + common.output
  }

}

configurations {
  functionalCompile.extendsFrom testCompile
  integrationSourcesCompile.extendsFrom testCompile
  integrationSourcesRuntime.extendsFrom testRuntime
}

task smoke(type: Test, description: 'Runs the smoke tests.', group: 'Verification') {
  testClassesDirs = sourceSets.functional.output.classesDirs
  classpath = sourceSets.functional.runtimeClasspath

  useJUnit {
    includeCategories 'uk.gov.hmcts.reform.sandl.snlevents.functional.SmokeTest'
  }
}

task functional(type: Test, description: 'Runs the functional tests on a running application.', group: 'Verification') {
  testClassesDirs = sourceSets.functional.output.classesDirs
  classpath = sourceSets.functional.runtimeClasspath
}

task integrationFakeRulesTests(type: Test, description: 'Runs the integration tests with wiremock.', group: 'Verification') {
  testClassesDirs = sourceSets.integrationSources.output.classesDirs
  classpath = sourceSets.integrationSources.runtimeClasspath

  useJUnit {
    includeCategories 'uk.gov.hmcts.reform.sandl.snlevents.testcategories.IntegrationTestWithFakeRules'
  }
}

task integrationTests(type: Test, description: 'Runs the integration tests with SpringBoot server.', group: 'Verification') {
  testClassesDirs = sourceSets.integrationSources.output.classesDirs
  classpath = sourceSets.integrationSources.runtimeClasspath

  useJUnit {
    includeCategories 'uk.gov.hmcts.reform.sandl.snlevents.testcategories.IntegrationTest'
  }
}

jacoco {
  toolVersion = "0.8.1"
}

jacocoTestReport {
  executionData(test, integrationTests, integrationFakeRulesTests)
  reports {
    xml.enabled = true
    csv.enabled = false
    html.destination file("${buildDir}/reports/jacoco/html")
    xml.destination file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: Scheduling & Listing :: snl-events POC build extension"
    property "sonar.projectKey", "snl-events"
    property "sonar.jacoco.reportPaths", "${project.buildDir}/jacoco/test.exec,${project.buildDir}/jacoco/integrationFakeRulesTests.exec,${project.buildDir}/jacoco/integrationTests.exec"
    property "sonar.dependencyCheck.reportPath", "${project.buildDir}/reports/dependency-check-report.xml"
    property "sonar.exclusions", "**/config/**,**/PostDbDataController*,**/AssignHearingPartToSessionAction*"
    property "sonar.test.exclusions", ""
    property 'sonar.coverage.exclusions', "**/config/**,**/PostDbDataController*,**/AssignHearingPartToSessionAction*"
  }
}

test.finalizedBy integrationFakeRulesTests
